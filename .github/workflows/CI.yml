name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation for faster from-scratch builds
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

jobs:
  sanity:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}
      - name: Check format
        run: cargo fmt-amaru
      - name: Run clippy
        run: cargo clippy-amaru
  build:
    name: Build on ${{ matrix.environments.runner }} with target ${{ matrix.environments.target }}
    strategy:
      fail-fast: false
      matrix:
        environments:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
          # Disabled for now
          #- runner: ubuntu-latest
          #  target: aarch64-unknown-linux-musl
          #  cross-compile: true
    timeout-minutes: 30
    runs-on: ${{ matrix.environments.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-${{ matrix.environments.target }}
      - run: rustup target add ${{ matrix.environments.target }}
      - name: Run tests
        run: |
          set +e
          if [[ "${{ matrix.environments.cross-compile }}" == "true" ]] ; then
            cargo install cross --git https://github.com/cross-rs/cross
            # cross doesn't load .cargo/config.toml, see https://github.com/cross-rs/cross/issues/562
            $HOME/.cargo/bin/cross test --locked --all-features --workspace --target ${{ matrix.environments.target }}
          else
            cargo test-amaru --locked --target ${{ matrix.environments.target }}
          fi
        shell: bash
  build-crates:
    name: Build crates on ${{ matrix.environments.runner }} with target ${{ matrix.environments.target }}
    needs: sanity
    strategy:
      fail-fast: false
      matrix:
        environments:
          - runner: ubuntu-latest
            target: wasm32-unknown-unknown
            package: amaru-ledger
            optional: true
    timeout-minutes: 30
    runs-on: ${{ matrix.environments.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-${{ matrix.environments.target }}
      - run: rustup target add ${{ matrix.environments.target }}
      - name: Run tests
        run: |
          set +e
          cargo test --locked --all-features -p ${{ matrix.environments.package }} --target ${{ matrix.environments.target }}
          exitcode="$?"
          if [[ "${{ matrix.environments.optional }}" == "true" && "$exitcode" != "0" ]] ; then
            # Propagate failure as a warning
            # but do not fail the job
            echo "::warning::Tests failed with exit code $exitcode"
            exit 0
          else
            exit "$exitcode"
          fi
        shell: bash
